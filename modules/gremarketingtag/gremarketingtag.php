<?php/*** 2014-2015 Shopmonauten E-Shop Solutions GmbH**  @author    Shopmonauten <info@shopmonauten.com>*  @copyright 2014-2015 E-Shop Solutions GmbH*  @version  Release: $Revision: 1.4.6 $*  @license   http://opensource.org/licenses/osl-3.0.php*/if (!defined('_PS_VERSION_'))	exit;class GremarketingTag extends Module{	public function __construct()	{		$this->name = 'gremarketingtag';		$this->tab = 'front_office_features';		$this->version = '1.4.6';		$this->author = 'Shoprunners';		$this->need_instance = 0;		$this->ps_versions_compliancy = array('min' => '1.5.4.1', 'max' => '1.7');		$this->bootstrap = true;		$this->module_key = '46c779883731ff6768869cd62846784d';		parent::__construct();		$this->displayName = $this->l('Google Remarketing Tag');		$this->description = $this->l('Adds The Google remarketing tag to pages');	}	public function install()	{		if (!parent::install()			|| !$this->registerHook('displayOrderConfirmation')			|| !$this->registerHook('displayShoppingCartFooter'))				return false;		$valid = true;		if (version_compare(_PS_VERSION_, '1.6', '<'))			$valid = $this->registerHook('displayFooter');		else			//here below changed from:			$valid = $this->registerHook('displayFooter');			$valid = $this->registerHook('displayHeader');		return $valid;	}	public function getContent()	{		$output = '';		if (Tools::isSubmit('submit'.$this->name))		{			Configuration::updateValue('CONVERSION_ID', Tools::getValue('CONVERSION_ID'));			$output .= $this->displayConfirmation($this->l('Settings updated'));		}		$output = '';		return $output.$this->renderForm();	}	public function renderForm()	{		$desc = $this->l('This module adds the google remarketing snippet to your page.');		$desc .= '<br>';		$desc .= $this->l('Please examine the provided code and find the conversion ID.');		$desc .= '<br>';		$desc .= $this->l('The module takes care of pagetypes, product ids and values to help you achieving best results.');		$desc .= '<br>';		$desc .= '<br>';		$desc .= '<img src="'._MODULE_DIR_.$this->name.'/views/img/snippet_screenshot.png">';		$desc .= '<br><br>';		// Get default Language		$default_lang = (int)Configuration::get('PS_LANG_DEFAULT');		$fields_form = array();		// 	Init Fields form array		$fields_form[0]['form'] = array(			'legend' => array(				'title' => $this->l('Settings'),			),			'description' =>  $desc,			'input' => array(				array(					'type' => 'text',					'label' => $this->l('Google Conversion ID'),					'name' => 'CONVERSION_ID',					'size' => 10,					'desc' => $this->l('Enter the google conversion ID which you find in your google code snippet.'),					'required' => true				)		),		'submit' => array(			'title' => $this->l('Save'),			'class' => 'button'		)	);	$helper = new HelperForm();	// Module, t    oken and currentIndex	$helper->module = $this;	$helper->name_controller = $this->name;	$helper->token = Tools::getAdminTokenLite('AdminModules');	$helper->currentIndex = AdminController::$currentIndex.'&configure='.$this->name;	// Language	$helper->default_form_language = $default_lang;	$helper->allow_employee_form_lang = $default_lang;	// Title and toolbar	$helper->title = $this->displayName;	$helper->show_toolbar = false;        // false -> remove toolbar	$helper->toolbar_scroll = true;      // yes - > Toolbar is always visible on the top of the screen.	$helper->submit_action = 'submit'.$this->name;	$helper->toolbar_btn = array(		'save' =>		array(			'desc' => $this->l('Save'),			'href' => AdminController::$currentIndex.'&configure='.$this->name.'&save'.$this->name.			'&token='.Tools::getAdminTokenLite('AdminModules'),		),		'back' => array(			'href' => AdminController::$currentIndex.'&token='.Tools::getAdminTokenLite('AdminModules'),			'desc' => $this->l('Back to list')		)		);		// Load current value		$helper->fields_value['CONVERSION_ID'] = Configuration::get('CONVERSION_ID');		return $helper->generateForm($fields_form);	}	public function hookDisplayShoppingCartFooter($params)	{		$productids = array();		if (!isset($this->context->cart))			return '';		$products = (array)$this->context->cart->getProducts();		if (empty($products))			return '';		foreach ($products as $product)			array_push($productids, "'".$product['id_product']."'");		$comma_separated = implode(',', $productids);		$ids = '['.$comma_separated.']';		$this->context->smarty->assign('PRODUCT_IDS', $ids);		$this->context->smarty->assign('in_shoppingcart', 'yes');		$this->context->smarty->assign('NETTOWARENWERT', $params['cart'] ? Tools::convertPrice((float)$params['cart']->getOrderTotal(false, Cart::ONLY_PRODUCTS_WITHOUT_SHIPPING), $params['cart']->id_currency, false) : 0);	}	public function hookDisplayOrderConfirmation()	{		//$order = new Order(Tools::getValue('id_order'));		$cart = new Cart(Tools::getValue('id_cart'));		$productids = array();		foreach ($cart->getProducts() as $product)			array_push($productids, "'".$product['id_product']."'");		$comma_separated = implode(',', $productids);		$ids = '['.$comma_separated.']';		$this->context->smarty->assign('PRODUCT_IDS', $ids);		$this->context->smarty->assign('NETTOWARENWERT', $cart ? Tools::convertPrice((float)$cart->getOrderTotal(false, Cart::ONLY_PRODUCTS_WITHOUT_SHIPPING), $cart->id_currency, false) : 0);		$this->context->smarty->assign('CONVERSION_ID', Configuration::get('CONVERSION_ID'));		$this->context->smarty->assign('REMARKONLY', 2);		$output = $this->display(__FILE__, 'header.tpl');		return $output.$this->display(__FILE__, 'common.tpl');	}	public function hookDisplayHeader($params)	{		if (Tools::getValue('id_order'))			return;		$productids = array();		$controller_name = get_class($this->context->controller);		$pos = strpos($controller_name, 'PaymentModuleFrontController');		if ($pos != false && isset($this->context->cart))		{			foreach ($this->context->cart->getProducts() as $product)				array_push($productids, "'".$product['id_product']."'");			$comma_separated = implode(',', $productids);			$ids = '['.$comma_separated.']';			$this->context->smarty->assign('PRODUCT_IDS', $ids);			$this->context->smarty->assign('NETTOWARENWERT', $params['cart'] ? Tools::convertPrice((float)$params['cart']->getOrderTotal(false, Cart::ONLY_PRODUCTS_WITHOUT_SHIPPING), $params['cart']->id_currency, false) : 0);		}		if (Tools::getValue('id_product'))			$this->context->smarty->assign('id_product', Tools::getValue('id_product'));		$this->context->smarty->assign('CONVERSION_ID', Configuration::get('CONVERSION_ID'));		$output = $this->display(__FILE__, 'header.tpl');		return $output.$this->display(__FILE__, 'common.tpl');	}	public function hookDisplayFooter($params)	{		if (Tools::getValue('id_order'))			return;		$productids = array();		$controller_name = get_class($this->context->controller);		$pos = strpos($controller_name, 'PaymentModuleFrontController');		if ($pos != false && isset($this->context->cart))		{			foreach ($this->context->cart->getProducts() as $product)				array_push($productids, "'".$product['id_product']."'");			$comma_separated = implode(',', $productids);			$ids = '['.$comma_separated.']';			$this->context->smarty->assign('PRODUCT_IDS', $ids);			$this->context->smarty->assign('NETTOWARENWERT', $params['cart'] ? Tools::convertPrice((float)$params['cart']->getOrderTotal(false, Cart::ONLY_PRODUCTS_WITHOUT_SHIPPING), $params['cart']->id_currency, false) : 0);		}		if (Tools::getValue('id_product'))			$this->context->smarty->assign('id_product', Tools::getValue('id_product'));		$this->context->smarty->assign('CONVERSION_ID', Configuration::get('CONVERSION_ID'));		$output = $this->display(__FILE__, 'header.tpl');		return $output.$this->display(__FILE__, 'common.tpl');	}}?>